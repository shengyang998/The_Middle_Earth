//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: shadowfax.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol SDFAXUserAccountSignupCall: ClientCallUnary {}

fileprivate final class SDFAXUserAccountSignupCallBase: ClientCallUnaryBase<SDFAXSignupRequest, SDFAXUserAccountReply>, SDFAXUserAccountSignupCall {
  override class var method: String { return "/ShadowFax.UserAccount/Signup" }
}

internal protocol SDFAXUserAccountSigninCall: ClientCallUnary {}

fileprivate final class SDFAXUserAccountSigninCallBase: ClientCallUnaryBase<SDFAXSigninRequest, SDFAXUserAccountReply>, SDFAXUserAccountSigninCall {
  override class var method: String { return "/ShadowFax.UserAccount/Signin" }
}

internal protocol SDFAXUserAccountChangePhoneCall: ClientCallUnary {}

fileprivate final class SDFAXUserAccountChangePhoneCallBase: ClientCallUnaryBase<SDFAXChangePhoneRequest, SDFAXUserAccountReply>, SDFAXUserAccountChangePhoneCall {
  override class var method: String { return "/ShadowFax.UserAccount/ChangePhone" }
}

internal protocol SDFAXUserAccountGetUserUUIDCall: ClientCallUnary {}

fileprivate final class SDFAXUserAccountGetUserUUIDCallBase: ClientCallUnaryBase<SDFAXGetUserUUIDRequest, SDFAXGetUserUUIDReplay>, SDFAXUserAccountGetUserUUIDCall {
  override class var method: String { return "/ShadowFax.UserAccount/GetUserUUID" }
}


/// Instantiate SDFAXUserAccountServiceClient, then call methods of this protocol to make API calls.
internal protocol SDFAXUserAccountService: ServiceClient {
  /// Synchronous. Unary.
  func signup(_ request: SDFAXSignupRequest) throws -> SDFAXUserAccountReply
  /// Asynchronous. Unary.
  func signup(_ request: SDFAXSignupRequest, completion: @escaping (SDFAXUserAccountReply?, CallResult) -> Void) throws -> SDFAXUserAccountSignupCall

  /// Synchronous. Unary.
  func signin(_ request: SDFAXSigninRequest) throws -> SDFAXUserAccountReply
  /// Asynchronous. Unary.
  func signin(_ request: SDFAXSigninRequest, completion: @escaping (SDFAXUserAccountReply?, CallResult) -> Void) throws -> SDFAXUserAccountSigninCall

  /// Synchronous. Unary.
  func changePhone(_ request: SDFAXChangePhoneRequest) throws -> SDFAXUserAccountReply
  /// Asynchronous. Unary.
  func changePhone(_ request: SDFAXChangePhoneRequest, completion: @escaping (SDFAXUserAccountReply?, CallResult) -> Void) throws -> SDFAXUserAccountChangePhoneCall

  /// Synchronous. Unary.
  func getUserUUID(_ request: SDFAXGetUserUUIDRequest) throws -> SDFAXGetUserUUIDReplay
  /// Asynchronous. Unary.
  func getUserUUID(_ request: SDFAXGetUserUUIDRequest, completion: @escaping (SDFAXGetUserUUIDReplay?, CallResult) -> Void) throws -> SDFAXUserAccountGetUserUUIDCall

}

internal final class SDFAXUserAccountServiceClient: ServiceClientBase, SDFAXUserAccountService {
  /// Synchronous. Unary.
  internal func signup(_ request: SDFAXSignupRequest) throws -> SDFAXUserAccountReply {
    return try SDFAXUserAccountSignupCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func signup(_ request: SDFAXSignupRequest, completion: @escaping (SDFAXUserAccountReply?, CallResult) -> Void) throws -> SDFAXUserAccountSignupCall {
    return try SDFAXUserAccountSignupCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func signin(_ request: SDFAXSigninRequest) throws -> SDFAXUserAccountReply {
    return try SDFAXUserAccountSigninCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func signin(_ request: SDFAXSigninRequest, completion: @escaping (SDFAXUserAccountReply?, CallResult) -> Void) throws -> SDFAXUserAccountSigninCall {
    return try SDFAXUserAccountSigninCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func changePhone(_ request: SDFAXChangePhoneRequest) throws -> SDFAXUserAccountReply {
    return try SDFAXUserAccountChangePhoneCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func changePhone(_ request: SDFAXChangePhoneRequest, completion: @escaping (SDFAXUserAccountReply?, CallResult) -> Void) throws -> SDFAXUserAccountChangePhoneCall {
    return try SDFAXUserAccountChangePhoneCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getUserUUID(_ request: SDFAXGetUserUUIDRequest) throws -> SDFAXGetUserUUIDReplay {
    return try SDFAXUserAccountGetUserUUIDCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getUserUUID(_ request: SDFAXGetUserUUIDRequest, completion: @escaping (SDFAXGetUserUUIDReplay?, CallResult) -> Void) throws -> SDFAXUserAccountGetUserUUIDCall {
    return try SDFAXUserAccountGetUserUUIDCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}
internal protocol SDFAXImladrisSendToCall: ClientCallUnary {}

fileprivate final class SDFAXImladrisSendToCallBase: ClientCallUnaryBase<SDFAXSendToRequest, SDFAXSendToReply>, SDFAXImladrisSendToCall {
  override class var method: String { return "/ShadowFax.Imladris/SendTo" }
}

internal protocol SDFAXImladrisSignalCall: ClientCallUnary {}

fileprivate final class SDFAXImladrisSignalCallBase: ClientCallUnaryBase<SDFAXSignalRequest, SDFAXSignalReply>, SDFAXImladrisSignalCall {
  override class var method: String { return "/ShadowFax.Imladris/Signal" }
}


/// Instantiate SDFAXImladrisServiceClient, then call methods of this protocol to make API calls.
internal protocol SDFAXImladrisService: ServiceClient {
  /// Synchronous. Unary.
  func sendTo(_ request: SDFAXSendToRequest) throws -> SDFAXSendToReply
  /// Asynchronous. Unary.
  func sendTo(_ request: SDFAXSendToRequest, completion: @escaping (SDFAXSendToReply?, CallResult) -> Void) throws -> SDFAXImladrisSendToCall

  /// Synchronous. Unary.
  func signal(_ request: SDFAXSignalRequest) throws -> SDFAXSignalReply
  /// Asynchronous. Unary.
  func signal(_ request: SDFAXSignalRequest, completion: @escaping (SDFAXSignalReply?, CallResult) -> Void) throws -> SDFAXImladrisSignalCall

}

internal final class SDFAXImladrisServiceClient: ServiceClientBase, SDFAXImladrisService {
  /// Synchronous. Unary.
  internal func sendTo(_ request: SDFAXSendToRequest) throws -> SDFAXSendToReply {
    return try SDFAXImladrisSendToCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func sendTo(_ request: SDFAXSendToRequest, completion: @escaping (SDFAXSendToReply?, CallResult) -> Void) throws -> SDFAXImladrisSendToCall {
    return try SDFAXImladrisSendToCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func signal(_ request: SDFAXSignalRequest) throws -> SDFAXSignalReply {
    return try SDFAXImladrisSignalCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func signal(_ request: SDFAXSignalRequest, completion: @escaping (SDFAXSignalReply?, CallResult) -> Void) throws -> SDFAXImladrisSignalCall {
    return try SDFAXImladrisSignalCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}
internal protocol SDFAXValinorCallRobotCall: ClientCallUnary {}

fileprivate final class SDFAXValinorCallRobotCallBase: ClientCallUnaryBase<SDFAXValinorRequest, SDFAXValinorReply>, SDFAXValinorCallRobotCall {
  override class var method: String { return "/ShadowFax.Valinor/CallRobot" }
}


/// Instantiate SDFAXValinorServiceClient, then call methods of this protocol to make API calls.
internal protocol SDFAXValinorService: ServiceClient {
  /// Synchronous. Unary.
  func callRobot(_ request: SDFAXValinorRequest) throws -> SDFAXValinorReply
  /// Asynchronous. Unary.
  func callRobot(_ request: SDFAXValinorRequest, completion: @escaping (SDFAXValinorReply?, CallResult) -> Void) throws -> SDFAXValinorCallRobotCall

}

internal final class SDFAXValinorServiceClient: ServiceClientBase, SDFAXValinorService {
  /// Synchronous. Unary.
  internal func callRobot(_ request: SDFAXValinorRequest) throws -> SDFAXValinorReply {
    return try SDFAXValinorCallRobotCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func callRobot(_ request: SDFAXValinorRequest, completion: @escaping (SDFAXValinorReply?, CallResult) -> Void) throws -> SDFAXValinorCallRobotCall {
    return try SDFAXValinorCallRobotCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

